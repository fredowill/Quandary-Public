package parser;

import java.util.*;
import java.io.*;
import java_cup.runtime.Symbol;
import java_cup.runtime.ComplexSymbolFactory.ComplexSymbol;
import java_cup.runtime.ComplexSymbolFactory;

import ast.*;
import interpreter.Interpreter;

parser code {: 
  Lexer lexer;

  public Parser(Lexer lex, ComplexSymbolFactory sf) {
    super(lex, sf);
    lexer = lex;
  }

  public void report_fatal_error(String message, Object info) {
    Interpreter.fatalError(message + " (" + info + ")", Interpreter.EXIT_PARSING_ERROR);
  }

  ast.Location loc(int line, int column) {
    return new ast.Location(line, column);
  }

:};

terminal PLUS, MINUS, TIMES, LPAREN, RPAREN, LCURLY, RCURLY;
terminal UMINUS;
terminal SEMICOLON, RETURN, PRINT, COMMA;
terminal INT, Q, REF;
terminal IF, ELSE;
terminal EQ, GE, GT, LE, LT, NE, NOT, AND, OR;
terminal ASSIGN;

terminal Long  INTCONST;
terminal String IDENT;

non terminal Program         program;

non terminal FuncDef         funcDef;
non terminal FuncDefList      funcDefList;
non terminal VarDecl         varDecl;

non terminal FormalDeclList  formalDeclList;
non terminal FormalDeclList  neFormalDeclList;


non terminal StmtList        stmtList;
non terminal Stmt            stmt;
non terminal Cond            cond;

non terminal Type            type;         
non terminal Expr            expr;
non terminal ExprList        exprList;
non terminal ExprList        neExprList;
non terminal BinaryExpr      binaryExpr;

precedence left ELSE;
precedence left OR;
precedence left AND;
precedence left NOT;
precedence left EQ, GE, GT, LE, LT, NE;
precedence left PLUS, MINUS;
precedence left TIMES;
precedence left UMINUS;

start with program;

program ::= funcDefList:f
            {: RESULT = new Program(f, loc(fleft, fright)); :}
         ;

funcDefList ::=  funcDef:f funcDefList:fl
            {: RESULT = new FuncDefList(f, fl, loc(fleft, fright)); :}
         | /*placeholder*/
            {: RESULT = null; :}
         ;

funcDef ::= varDecl:v1 LPAREN formalDeclList:fdl RPAREN LCURLY stmtList:sl RCURLY
            {: RESULT = new FuncDef(v1, fdl, sl, loc(slleft, slright)); :}

         ;

formalDeclList ::=  neFormalDeclList:nf
            {: RESULT = nf; :}
         | /*placeholder*/
            {: RESULT = null; :}
         ;

neFormalDeclList ::=  varDecl:v COMMA neFormalDeclList:nfl
            {: RESULT = new FormalDeclList(v, nfl, loc(vleft, vright)); :}
         |  varDecl:v
            {: RESULT = new FormalDeclList(v, null, loc(vleft, vright)); :}
         ;

varDecl ::= type:t IDENT:id
            {: RESULT = new VarDecl(t, id, loc(tleft, tright)); :}
         ;        

type ::= INT:e
            {: RESULT = new Type(Type.INT, loc(eleft, eright)); :}
      |  Q:e
            {: RESULT = new Type(Type.Q, loc(eleft, eright)); :}
      |  REF:e
            {: RESULT = new Type(Type.REF, loc(eleft, eright)); :}
         ;

stmtList ::= stmt:s stmtList:sl
            {: RESULT = new StmtList(s, sl, loc(slleft, slleft)); :}
      |   /*placeholder*/
            {:RESULT = null; :}
         ; 
         
stmt ::= varDecl:v ASSIGN expr:e SEMICOLON
            {: RESULT = new VarDeclStmt(v, e, loc(vleft, vleft)); :}
      |   IF LPAREN cond:c RPAREN stmt:s
            {:RESULT = new IfStmt(c, s, loc(cleft, cleft)); :}
      |   IF LPAREN cond:c RPAREN stmt:s1 ELSE stmt:s2
            {:RESULT = new IfElseStmt(c, s1, s2, loc(cleft, cright)); :}
      |   PRINT expr:e SEMICOLON
            {:RESULT = new PrintStmt(e, loc(eleft, eright)); :}
      |   RETURN expr:e SEMICOLON
            {:RESULT = new ReturnStmt(e, loc(eleft, eright)); :}
      |   LCURLY stmtList:sl RCURLY
            {:RESULT = sl; :}
         ; 

cond ::= expr:e1 LE expr:e2
         {: RESULT = new CompareCond(e1, CompareCond.LE, e2, loc(e1left, e1right)); :}
      |  expr:e1 GE expr:e2
         {: RESULT = new CompareCond(e1, CompareCond.GE, e2, loc(e1left, e1right)); :}
      |  expr:e1 EQ expr:e2
         {: RESULT = new CompareCond(e1, CompareCond.EQ, e2, loc(e1left, e1right)); :}
      |  expr:e1 NE expr:e2 
         {: RESULT = new CompareCond(e1, CompareCond.NE, e2, loc(e1left, e1right)); :}
      |  expr:e1 LT expr:e2
         {: RESULT = new CompareCond(e1, CompareCond.LT, e2, loc(e1left, e1right)); :}
      |  expr:e1 GT expr:e2
         {: RESULT = new CompareCond(e1, CompareCond.GT, e2, loc(e1left, e1right)); :}
      |  cond:c1 AND cond:c2
         {: RESULT = new LogicalCond(c1, LogicalCond.AND, c2, loc(c1left, c1right)); :}
      |  cond:c1 OR cond:c2
         {: RESULT = new LogicalCond(c1, LogicalCond.OR, c2, loc(c1left, c1right)); :}
      |  NOT cond:c1
         {: RESULT = new LogicalCond(c1, LogicalCond.NOT, null, loc(c1left, c1right)); :}
      |  LPAREN cond:c RPAREN
         {: RESULT = c; :}
      ;

expr ::= INTCONST:c
         {: RESULT = new ConstExpr(c, loc(cleft, cright)); :}
      |   IDENT:c
         {: RESULT = new VarExpr(c, loc(cleft, cright)); :}
      |  MINUS expr:e
         {: RESULT = new UMinusExpr(e, loc(eleft, eright)); :} 
         %prec UMINUS
      |  binaryExpr:e
         {: RESULT = e; :}
      |  LPAREN expr:e RPAREN
         {: RESULT = e; :} 
      |  IDENT:id LPAREN exprList:el RPAREN
         {: RESULT = new CallExpr(id, el, loc(idleft, idright)); :} 
      ;

exprList ::= neExprList:e
         {: RESULT = e; :}
      |   /*placeholder*/
         {: RESULT = null; :}
      ;

neExprList ::= expr:e COMMA neExprList:eList
         {: RESULT = new ExprList(e, eList , loc(eleft, eright)); :}
      |   expr:e
         {: RESULT = new ExprList(e, null , loc(eleft, eright)); :}
      ;

binaryExpr ::= expr:e1 PLUS expr:e2
               {: RESULT = new BinaryExpr(e1, BinaryExpr.PLUS, e2, loc(e1left, e1right)); :}
            |  expr:e1 MINUS expr:e2
               {: RESULT = new BinaryExpr(e1, BinaryExpr.MINUS, e2, loc(e1left, e1right)); :}
            |  expr:e1 TIMES expr:e2
               {: RESULT = new BinaryExpr(e1, BinaryExpr.TIMES, e2, loc(e1left, e1right)); :}
            ;
